{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Oblique","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to the documentation of <code>oblique</code>.</p> <p><code>oblique</code> is a template repository, containing a small web-application using FastAPI and HTMX, to help you get started writting your own application / API.</p> <p><code>oblique</code> uses the following stack :</p> <ul> <li><code>FastAPI</code> for the web API</li> <li><code>HTMX</code> to have interactivity without JS</li> <li><code>JinjaX</code> for clean server-side components</li> <li><code>TailwindCSS</code> for component's design</li> <li><code>SQLite</code>, <code>sqlalchemy</code>, and <code>alembic</code> for the database</li> <li><code>Docker</code> of course</li> </ul> <p>If you want to use this template, follow the instructions at the Usage page.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#local","title":"Local","text":"<p><code>oblique</code> isn't published as a package in PyPi. Install it locally by :</p> <pre><code>git clone https://github.com/astariul/oblique.git\ncd oblique\npip install -e .\n</code></pre> <p>or :</p> <pre><code>pip install git+https://github.com/astariul/oblique.git\n</code></pre>"},{"location":"#extra-dependencies","title":"Extra dependencies","text":"<p>You can also install extras dependencies, for example :</p> <pre><code>pip install -e .[docs]\n</code></pre> <p>Will install necessary dependencies for building the docs.</p> <p>Hint</p> <p>If you installed the package directly from github, run : <pre><code>pip install \"oblique[docs] @ git+https://github.com/astariul/oblique.git\"\n</code></pre></p> <p>List of extra dependencies :</p> <ul> <li><code>admin</code> : Dependencies for managing the database.</li> <li><code>test</code> : Dependencies for running unit-tests.</li> <li><code>hook</code> : Dependencies for running pre-commit hooks.</li> <li><code>lint</code> : Dependencies for running linters and formatters.</li> <li><code>docs</code> : Dependencies for building the documentation.</li> <li><code>dev</code> : <code>test</code> + <code>hook</code> + <code>lint</code> + <code>docs</code>.</li> <li><code>all</code> : All extra dependencies.</li> </ul>"},{"location":"#contribute","title":"Contribute","text":"<p>To contribute, install the package locally (see Installation), create your own branch, add your code (and tests, and documentation), and open a PR !</p>"},{"location":"#pre-commit-hooks","title":"Pre-commit hooks","text":"<p>Pre-commit hooks are set to check the code added whenever you commit something.</p> <p>When you try to commit your code, hooks are automatically run, and if you code does not meet the quality required by linters, it will not be committed. You then have to fix your code and try to commit again !</p> <p>Important</p> <p>If you never ran the hooks before, install it with : <pre><code>pre-commit install\n</code></pre></p> <p>Info</p> <p>You can manually run the pre-commit hooks with : <pre><code>pre-commit run --all-files\n</code></pre></p>"},{"location":"#unit-tests","title":"Unit-tests","text":"<p>When you contribute, you need to make sure all the unit-tests pass. You should also add tests if necessary !</p> <p>You can run the tests with :</p> <pre><code>pytest\n</code></pre> <p>Info</p> <p>Tests are not included in the pre-commit hooks, because running the tests might be slow, and for the sake of developpers we want the pre-commit hooks to be fast !</p> <p>Info</p> <p>Pre-commit hooks will not run the tests, but it will automatically update the coverage badge !</p> <p>Hint</p> <p>To get the coverage report in HTML format, run : <pre><code>pytest --cov-report=html\n</code></pre> And then open the file <code>htmlcov/index.html</code> with your browser.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>When you contribute, make sure to keep the documentation up-to-date.</p> <p>You can visualize the documentation locally by running :</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"code_ref_api/","title":"api.py","text":"<p>File containing the routes of the API.</p>"},{"location":"code_ref_api/#exception-handling","title":"Exception handling","text":"<p>             Bases: <code>HTTPException</code></p> <p>Exception raised by the API.</p> <p>Parameters:</p> Name Type Description Default <code>status_code</code> <code>int</code> <p>HTTP code to return.</p> required <code>detail</code> <code>str</code> <p>Error description. Defaults to <code>None</code>.</p> required Source code in <code>oblique/api.py</code> <pre><code>class APIException(HTTPException):\n    \"\"\"Exception raised by the API.\n\n    Args:\n        status_code (int): HTTP code to return.\n        detail (str, optional): Error description. Defaults to `None`.\n    \"\"\"\n\n    pass\n</code></pre> <p>Define the exception handler for APIException.</p> Source code in <code>oblique/api.py</code> <pre><code>async def api_exception_handler(request: Request, exc: HTTPException):\n    \"\"\"Define the exception handler for APIException.\"\"\"\n    return await http_exception_handler(request, exc)\n</code></pre>"},{"location":"code_ref_api/#data-models","title":"Data models","text":"<p>             Bases: <code>BaseModel</code></p> <p>Parameters to pass to identify a package.</p> <ul> <li>pkg_name (str): Name of the package to get.</li> <li>force_refresh (bool, optional): If set to <code>True</code>, the local cache is     ignored and the PyPi API is called. Note that it might be slower.     Defaults to <code>False</code>.</li> </ul> Source code in <code>oblique/api.py</code> <pre><code>class PackageParameters(BaseModel):\n    \"\"\"Parameters to pass to identify a package.\n\n    * pkg_name (str): Name of the package to get.\n    * force_refresh (bool, optional): If set to `True`, the local cache is\n        ignored and the PyPi API is called. Note that it might be slower.\n        Defaults to `False`.\n    \"\"\"\n\n    pkg_name: str\n    force_refresh: bool = False\n</code></pre>"},{"location":"code_ref_api/#routes","title":"Routes","text":"<p>Route to get the informations of the package requested.</p> These informations are <ul> <li>Last release date</li> <li>Number of versions released</li> <li>Number of versions yanked</li> </ul> Source code in <code>oblique/api.py</code> <pre><code>@router.post(\"/pkg_infos\")\ndef get_pkg_infos(parameters: PackageParameters, db: Session = Depends(get_db)):\n    \"\"\"Route to get the informations of the package requested.\n\n    These informations are :\n     * Last release date\n     * Number of versions released\n     * Number of versions yanked\n    \"\"\"\n    try:\n        last_release, n_versions, n_versions_yanked = get_package_info(\n            db, parameters.pkg_name, human_readable=False, force_refresh=parameters.force_refresh\n        )\n        return {\n            \"last_release\": last_release,\n            \"n_versions\": n_versions,\n            \"n_versions_yanked\": n_versions_yanked,\n        }\n    except UnknownPackageException:\n        raise APIException(status_code=404, detail=\"This package was not published to PyPi index.\")\n</code></pre>"},{"location":"code_ref_app/","title":"app.py","text":"<p>Main file, containing the FastAPI web-app definition and its routes.</p>"},{"location":"code_ref_app/#exception-handling","title":"Exception handling","text":"<p>             Bases: <code>HTTPException</code></p> <p>Exception raised by the web-app.</p> <p>Parameters:</p> Name Type Description Default <code>status_code</code> <code>int</code> <p>HTTP code to return.</p> required <code>detail</code> <code>str</code> <p>Error description. Defaults to <code>None</code>.</p> required Source code in <code>oblique/app.py</code> <pre><code>class HTMLException(HTTPException):\n    \"\"\"Exception raised by the web-app.\n\n    Args:\n        status_code (int): HTTP code to return.\n        detail (str, optional): Error description. Defaults to `None`.\n    \"\"\"\n\n    pass\n</code></pre> <p>Define the exception handler for HTMLException.</p> Source code in <code>oblique/app.py</code> <pre><code>async def html_exception_handler(request: Request, exc: HTTPException):\n    \"\"\"Define the exception handler for HTMLException.\"\"\"\n    return HTMLResponse(\n        status_code=exc.status_code, content=catalog.render(\"Error\", status_code=exc.status_code, error_msg=exc.detail)\n    )\n</code></pre>"},{"location":"code_ref_app/#dependencies","title":"Dependencies","text":"<p>Dependency, to make sure the received request is a HTMX request. If it's not a HTMX request, a 404 is returned.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>Request to check.</p> required Source code in <code>oblique/app.py</code> <pre><code>async def htmx(request: Request):\n    \"\"\"Dependency, to make sure the received request is a HTMX request.\n    If it's not a HTMX request, a 404 is returned.\n\n    Args:\n        request (Request): Request to check.\n    \"\"\"\n    if \"hx-request\" not in request.headers or request.headers[\"hx-request\"] != \"true\":\n        raise HTMLException(status_code=404, detail=\"Sorry, we couldn't find this page.\")\n</code></pre>"},{"location":"code_ref_app/#routes","title":"Routes","text":"<p>Main route, sending the home page.</p> Source code in <code>oblique/app.py</code> <pre><code>@router.get(\"/\", response_class=HTMLResponse)\nasync def home():\n    \"\"\"Main route, sending the home page.\"\"\"\n    return catalog.render(\"HomePage\")\n</code></pre> <p>Favicon.</p> Source code in <code>oblique/app.py</code> <pre><code>@router.get(\"/favicon.ico\", include_in_schema=False)\nasync def favicon():\n    \"\"\"Favicon.\"\"\"\n    return FileResponse(ASSETS_DIR / \"logo.svg\")\n</code></pre> <p>Search route, to display the search results.</p> Source code in <code>oblique/app.py</code> <pre><code>@router.get(\"/search\", response_class=HTMLResponse)\nasync def search(pkg: str, db: Session = Depends(get_db), h: None = Depends(htmx)):\n    \"\"\"Search route, to display the search results.\"\"\"\n    try:\n        last_release, n_versions, n_versions_yanked = get_package_info(db, pkg)\n        return catalog.render(\n            \"SearchResult\",\n            pkg_name=pkg,\n            last_release=last_release,\n            n_versions=n_versions,\n            n_versions_yanked=n_versions_yanked,\n        )\n    except UnknownPackageException:\n        return catalog.render(\"UnknownPackage\", pkg_name=pkg)\n</code></pre> <p>Catch-all route, if the user tries to access an unknown page, we display a 404.</p> Source code in <code>oblique/app.py</code> <pre><code>@router.route(\"/{full_path:path}\")\nasync def unknown_path(request: Request):\n    \"\"\"Catch-all route, if the user tries to access an unknown page, we display\n    a 404.\n    \"\"\"\n    raise HTMLException(status_code=404, detail=\"Sorry, we couldn't find this page.\")\n</code></pre>"},{"location":"code_ref_core/","title":"core.py","text":"<p>File containing all the business logic, to be used by the API and the web-app.</p>"},{"location":"code_ref_core/#exceptions","title":"Exceptions","text":"<p>             Bases: <code>Exception</code></p> <p>Exception raised when the PyPi API doesn't respond or respond with an unhandled HTTP code.</p> Source code in <code>oblique/core.py</code> <pre><code>class PyPiAPIException(Exception):\n    \"\"\"Exception raised when the PyPi API doesn't respond or respond with an\n    unhandled HTTP code.\n    \"\"\"\n\n    pass\n</code></pre> <p>             Bases: <code>Exception</code></p> <p>Exception raised when the given package name is not a package registered in PyPi index.</p> Source code in <code>oblique/core.py</code> <pre><code>class UnknownPackageException(Exception):\n    \"\"\"Exception raised when the given package name is not a package registered\n    in PyPi index.\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"code_ref_core/#functions","title":"Functions","text":"<p>Function that call the PyPi API and retrieve the releases data for a specific package name.</p> <p>Parameters:</p> Name Type Description Default <code>pkg_name</code> <code>str</code> <p>The package name for which we want to retrieve the data.</p> required <p>Raises:</p> Type Description <code>PyPiAPIException</code> <p>Exception raised if the PyPi API behaves unexpectedly.</p> <p>Returns:</p> Type Description <code>List[Tuple[str, datetime, bool]]</code> <p>List[Tuple[str, datetime, bool]]: Releases data for this package. It's a list, where each element represents a single release, which is a tuple with : * The version of the release * The release date * If this release was yanked (<code>True</code>) or not (<code>False</code>) Note that if this list is empty, it means the package does not exists in PyPi.</p> Source code in <code>oblique/core.py</code> <pre><code>def get_package_info_from_pypi(pkg_name: str) -&gt; List[Tuple[str, datetime, bool]]:\n    \"\"\"Function that call the PyPi API and retrieve the releases data for a\n    specific package name.\n\n    Args:\n        pkg_name (str): The package name for which we want to retrieve the data.\n\n    Raises:\n        PyPiAPIException: Exception raised if the PyPi API behaves unexpectedly.\n\n    Returns:\n        List[Tuple[str, datetime, bool]]: Releases data for this package. It's\n            a list, where each element represents a single release, which is a\n            tuple with :\n            * The version of the release\n            * The release date\n            * If this release was yanked (`True`) or not (`False`)\n            Note that if this list is empty, it means the package does not\n            exists in PyPi.\n    \"\"\"\n    r = requests.get(f\"https://pypi.org/pypi/{pkg_name}/json\")\n\n    if r.status_code == 200:\n        data = r.json()\n\n        # Extract the data we need from the response\n        return [\n            (version, isoparse(info[\"upload_time\"]), info[\"yanked\"])\n            for version, (info, *_) in data[\"releases\"].items()\n        ]\n    elif r.status_code == 404:\n        # Non-existing package : just return an empty list of releases\n        return []\n    else:\n        raise PyPiAPIException(\"PyPi API unreachable\")\n</code></pre> <p>Function that retrieve the statistics of a package stored in the DB.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>DB Session.</p> required <code>db_package</code> <code>Package</code> <p>The DB object corresponding to the package we want to extract statistics from.</p> required <code>human_readable</code> <code>bool</code> <p>If set to <code>True</code>, dates are returned in human-readable format (like <code>3 days ago</code> for example). If set to <code>False</code>, dates are returned in ISO 8601. Defaults to <code>True</code>.</p> <code>True</code> <p>Raises:</p> Type Description <code>UnknownPackageException</code> <p>Exception raised if the package is not a package registered in PyPi index (has no releases).</p> <p>Returns:</p> Type Description <code>Tuple[str, int, int]</code> <p>Tuple[str, int, int]: The statistics for this package. This is a tuple with : * The release date in a human-readable format * The number of versions released * The number of versions yanked</p> Source code in <code>oblique/core.py</code> <pre><code>def get_stats_for(db: Session, db_package: models.Package, human_readable: bool = True) -&gt; Tuple[str, int, int]:\n    \"\"\"Function that retrieve the statistics of a package stored in the DB.\n\n    Args:\n        db (Session): DB Session.\n        db_package (models.Package): The DB object corresponding to the package\n            we want to extract statistics from.\n        human_readable (bool, optional): If set to `True`, dates are returned\n            in human-readable format (like `3 days ago` for example). If set to\n            `False`, dates are returned in ISO 8601. Defaults to `True`.\n\n    Raises:\n        UnknownPackageException: Exception raised if the package is not a\n            package registered in PyPi index (has no releases).\n\n    Returns:\n        Tuple[str, int, int]: The statistics for this package. This is a tuple\n            with :\n            * The release date in a human-readable format\n            * The number of versions released\n            * The number of versions yanked\n    \"\"\"\n    # From the DB, get our statistics\n    last_release = crud.get_latest_release_of(db, db_package)\n    n_versions = crud.get_n_versions_of(db, db_package)\n    n_versions_yanked = crud.get_n_versions_yanked_of(db, db_package)\n\n    # Handle the case where this package name wasn't released)\n    if last_release is None:\n        raise UnknownPackageException()\n\n    # Format the last_release to be human-friendly\n    if human_readable:\n        td = datetime.utcnow() - last_release.date\n        if td &lt; timedelta(hours=24):\n            h = max(td.seconds // 3600, 1)\n            last_release = f\"{h}h ago\"\n        elif td &lt; timedelta(days=30):\n            last_release = f\"{td.days} day{'s' if td.days &gt; 1 else ''} ago\"\n        else:\n            last_release = f\"{last_release.date:%d %b %Y}\"\n    else:\n        last_release = last_release.date\n\n    return last_release, n_versions, n_versions_yanked\n</code></pre> <p>Main function to retrieve informations about a PyPi package.</p> <p>This function will first check if the informations is cached locally. If it's not cached locally, the data is retrieved from the PyPi API and cached locally. The cache is valid for 24h.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>DB Session.</p> required <code>pkg_name</code> <code>str</code> <p>Name of the package for which we want data.</p> required <code>human_readable</code> <code>bool</code> <p>If set to <code>True</code>, dates are returned in human-readable format (like <code>3 days ago</code> for example). If set to <code>False</code>, dates are returned in ISO 8601. Defaults to <code>True</code>.</p> <code>True</code> <code>force_refresh</code> <code>bool</code> <p>If set to <code>True</code>, the local cache is ignored and the PyPi API is called. Note that it might be slower. Defaults to <code>False</code>.</p> <code>False</code> <p>Returns:</p> Type Description <code>Tuple[str, int, int]</code> <p>Tuple[str, int, int]: The statistics for the package. This is a tuple with : * The release date in a human-readable format * The number of versions released * The number of versions yanked</p> Source code in <code>oblique/core.py</code> <pre><code>def get_package_info(\n    db: Session, pkg_name: str, human_readable: bool = True, force_refresh: bool = False\n) -&gt; Tuple[str, int, int]:\n    \"\"\"Main function to retrieve informations about a PyPi package.\n\n    This function will first check if the informations is cached locally. If\n    it's not cached locally, the data is retrieved from the PyPi API and cached\n    locally.\n    The cache is valid for 24h.\n\n    Args:\n        db (Session): DB Session.\n        pkg_name (str): Name of the package for which we want data.\n        human_readable (bool, optional): If set to `True`, dates are returned\n            in human-readable format (like `3 days ago` for example). If set to\n            `False`, dates are returned in ISO 8601. Defaults to `True`.\n        force_refresh (bool, optional): If set to `True`, the local cache is\n            ignored and the PyPi API is called. Note that it might be slower.\n            Defaults to `False`.\n\n    Returns:\n        Tuple[str, int, int]: The statistics for the package. This is a tuple\n            with :\n            * The release date in a human-readable format\n            * The number of versions released\n            * The number of versions yanked\n    \"\"\"\n    # Check the database to see if we already have that package's infos locally cached\n    db_package = crud.get_package_by_name(db, pkg_name)\n\n    if db_package is None or db_package.last_updated &lt; datetime.utcnow() - CACHE_TTL or force_refresh:\n        # This package is not cached locally, or the cache is stale\n        # Call the PyPi API to retrieve its informations and update our local cache\n        releases = get_package_info_from_pypi(pkg_name)\n\n        if db_package is not None:\n            db_package = crud.update_package(db, db_package, releases)\n        else:\n            db_package = crud.create_package(db, pkg_name)\n            crud.create_releases(db, releases, db_package.id)\n\n    # Retrieve the numbers we are interested in\n    return get_stats_for(db, db_package, human_readable=human_readable)\n</code></pre>"},{"location":"code_ref_database/","title":"Database","text":""},{"location":"code_ref_database/#modelspy","title":"<code>models.py</code>","text":"<p>Declaration of the DB model.</p>"},{"location":"code_ref_database/#oblique.database.models.Package","title":"<code>Package</code>","text":"<p>             Bases: <code>Base</code></p> <p>Table representing a Python Package registered in PyPi.</p> Source code in <code>oblique/database/models.py</code> <pre><code>class Package(Base):\n    \"\"\"Table representing a Python Package registered in PyPi.\"\"\"\n\n    __tablename__ = \"packages\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    last_updated = Column(DateTime)\n    name = Column(String, unique=True, index=True)\n\n    releases = relationship(\"Release\", back_populates=\"package\", passive_deletes=True)\n</code></pre>"},{"location":"code_ref_database/#oblique.database.models.Release","title":"<code>Release</code>","text":"<p>             Bases: <code>Base</code></p> <p>Table representing a single release of a python package.</p> Source code in <code>oblique/database/models.py</code> <pre><code>class Release(Base):\n    \"\"\"Table representing a single release of a python package.\"\"\"\n\n    __tablename__ = \"releases\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    version = Column(String, nullable=False)\n    date = Column(DateTime)\n    is_yanked = Column(Boolean, default=False)\n    package_id = Column(Integer, ForeignKey(\"packages.id\", ondelete=\"CASCADE\"))\n\n    package = relationship(\"Package\", back_populates=\"releases\")\n</code></pre>"},{"location":"code_ref_database/#crudpy","title":"<code>crud.py</code>","text":"<p>CRUD functions to interact with the DB.</p>"},{"location":"code_ref_database/#oblique.database.crud.create_package","title":"<code>create_package(db, pkg_name)</code>","text":"<p>CRUD function to create a new Package.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>DB Session.</p> required <code>pkg_name</code> <code>str</code> <p>Name of the package to create.</p> required <p>Returns:</p> Type Description <code>Package</code> <p>models.Package: Created Package.</p> Source code in <code>oblique/database/crud.py</code> <pre><code>def create_package(db: Session, pkg_name: str) -&gt; models.Package:\n    \"\"\"CRUD function to create a new Package.\n\n    Args:\n        db (Session): DB Session.\n        pkg_name (str): Name of the package to create.\n\n    Returns:\n        models.Package: Created Package.\n    \"\"\"\n    db_package = models.Package(name=pkg_name, last_updated=func.now())\n    db.add(db_package)\n    db.commit()\n    db.refresh(db_package)\n    return db_package\n</code></pre>"},{"location":"code_ref_database/#oblique.database.crud.create_release","title":"<code>create_release(db, version, date, is_yanked, package_id)</code>","text":"<p>CRUD function to create a new Release.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>DB Session.</p> required <code>version</code> <code>str</code> <p>Version name of this release.</p> required <code>date</code> <code>datetime</code> <p>Release date.</p> required <code>is_yanked</code> <code>bool</code> <p>If this release was yanked (<code>True</code>) or not (<code>False</code>).</p> required <code>package_id</code> <code>int</code> <p>ID of the package this release is associated with.</p> required <p>Returns:</p> Type Description <code>Release</code> <p>models.Release: Created Release.</p> Source code in <code>oblique/database/crud.py</code> <pre><code>def create_release(db: Session, version: str, date: datetime, is_yanked: bool, package_id: int) -&gt; models.Release:\n    \"\"\"CRUD function to create a new Release.\n\n    Args:\n        db (Session): DB Session.\n        version (str): Version name of this release.\n        date (datetime): Release date.\n        is_yanked (bool): If this release was yanked (`True`) or not (`False`).\n        package_id (int): ID of the package this release is associated with.\n\n    Returns:\n        models.Release: Created Release.\n    \"\"\"\n    db_release = models.Release(version=version, date=date, is_yanked=is_yanked, package_id=package_id)\n    db.add(db_release)\n    db.commit()\n    db.refresh(db_release)\n    return db_release\n</code></pre>"},{"location":"code_ref_database/#oblique.database.crud.create_releases","title":"<code>create_releases(db, releases_data, package_id)</code>","text":"<p>CRUD function to create several new Releases.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>DB Session.</p> required <code>releases_data</code> <code>List[Tuple[str, datetime, bool]]</code> <p>List of releases data. Each element is a tuple with the version name, the release date, and if this release is yanked or not.</p> required <code>package_id</code> <code>int</code> <p>ID of the package this release is associated with.</p> required Source code in <code>oblique/database/crud.py</code> <pre><code>def create_releases(db: Session, releases_data: List[Tuple[str, datetime, bool]], package_id: int):\n    \"\"\"CRUD function to create several new Releases.\n\n    Args:\n        db (Session): DB Session.\n        releases_data (List[Tuple[str, datetime, bool]]): List of releases data.\n            Each element is a tuple with the version name, the release date,\n            and if this release is yanked or not.\n        package_id (int): ID of the package this release is associated with.\n    \"\"\"\n    for version, date, is_yanked in releases_data:\n        create_release(db, version, date, is_yanked, package_id)\n</code></pre>"},{"location":"code_ref_database/#oblique.database.crud.create_tables","title":"<code>create_tables()</code>","text":"<p>Util function to create the DB tables.</p> <p>Warning, this function should be called only if the DB tables aren't already created.</p> Source code in <code>oblique/database/crud.py</code> <pre><code>def create_tables():\n    \"\"\"Util function to create the DB tables.\n\n    Warning, this function should be called only if the DB tables aren't\n    already created.\n    \"\"\"\n    models.Base.metadata.create_all(bind=engine)\n</code></pre>"},{"location":"code_ref_database/#oblique.database.crud.get_latest_release_of","title":"<code>get_latest_release_of(db, db_package)</code>","text":"<p>CRUD function to retrieve the latest Release of a Package.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>DB Session.</p> required <code>db_package</code> <code>Package</code> <p>Package for which to get the last release date.</p> required <p>Returns:</p> Type Description <code>Release</code> <p>models.Release: Latest release for this package.</p> Source code in <code>oblique/database/crud.py</code> <pre><code>def get_latest_release_of(db: Session, db_package: models.Package) -&gt; models.Release:\n    \"\"\"CRUD function to retrieve the latest Release of a Package.\n\n    Args:\n        db (Session): DB Session.\n        db_package (models.Package): Package for which to get the last release\n            date.\n\n    Returns:\n        models.Release: Latest release for this package.\n    \"\"\"\n    return (\n        db.query(models.Release)\n        .filter(models.Release.package_id == db_package.id)\n        .order_by(models.Release.date.desc())\n        .first()\n    )\n</code></pre>"},{"location":"code_ref_database/#oblique.database.crud.get_n_versions_of","title":"<code>get_n_versions_of(db, db_package)</code>","text":"<p>CRUD function to retrieve the number of releases of a Package.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>DB Session.</p> required <code>db_package</code> <code>Package</code> <p>Package for which to get the number of versions.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of versions for this package.</p> Source code in <code>oblique/database/crud.py</code> <pre><code>def get_n_versions_of(db: Session, db_package: models.Package) -&gt; int:\n    \"\"\"CRUD function to retrieve the number of releases of a Package.\n\n    Args:\n        db (Session): DB Session.\n        db_package (models.Package): Package for which to get the number of\n            versions.\n\n    Returns:\n        int: The number of versions for this package.\n    \"\"\"\n    return db.query(models.Release).filter(models.Release.package_id == db_package.id).count()\n</code></pre>"},{"location":"code_ref_database/#oblique.database.crud.get_n_versions_yanked_of","title":"<code>get_n_versions_yanked_of(db, db_package)</code>","text":"<p>CRUD function to retrieve the number of yanked releases of a Package.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>DB Session.</p> required <code>db_package</code> <code>Package</code> <p>Package for which to get the number of yanked versions.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of yanked versions for this package.</p> Source code in <code>oblique/database/crud.py</code> <pre><code>def get_n_versions_yanked_of(db: Session, db_package: models.Package) -&gt; int:\n    \"\"\"CRUD function to retrieve the number of yanked releases of a Package.\n\n    Args:\n        db (Session): DB Session.\n        db_package (models.Package): Package for which to get the number of\n            yanked versions.\n\n    Returns:\n        int: The number of yanked versions for this package.\n    \"\"\"\n    return (\n        db.query(models.Release)\n        .filter(models.Release.package_id == db_package.id)\n        .filter(models.Release.is_yanked.is_(True))\n        .count()\n    )\n</code></pre>"},{"location":"code_ref_database/#oblique.database.crud.get_package_by_name","title":"<code>get_package_by_name(db, pkg_name)</code>","text":"<p>CRUD function to retrieve a Package from its name.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>DB Session.</p> required <code>pkg_name</code> <code>str</code> <p>Name of the package to retrieve.</p> required <p>Returns:</p> Type Description <code>Package</code> <p>models.Package: Package with the given name.</p> Source code in <code>oblique/database/crud.py</code> <pre><code>def get_package_by_name(db: Session, pkg_name: str) -&gt; models.Package:\n    \"\"\"CRUD function to retrieve a Package from its name.\n\n    Args:\n        db (Session): DB Session.\n        pkg_name (str): Name of the package to retrieve.\n\n    Returns:\n        models.Package: Package with the given name.\n    \"\"\"\n    return db.query(models.Package).filter(models.Package.name == pkg_name).first()\n</code></pre>"},{"location":"code_ref_database/#oblique.database.crud.update_package","title":"<code>update_package(db, db_package, releases_data)</code>","text":"<p>CRUD function to update a Package (changing the <code>last_updated</code> attribute).</p> <p>This will simply update the <code>last_updated</code> field, delete all associated releases, and recreate them from the given data.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>DB Session.</p> required <code>db_package</code> <code>Package</code> <p>Package to update.</p> required <code>releases_data</code> <code>List[Tuple[str, datetime, bool]]</code> <p>List of releases data. Each element is a tuple with the version name, the release date, and if this release is yanked or not.</p> required <p>Returns:</p> Type Description <code>Package</code> <p>models.Package: Package updated.</p> Source code in <code>oblique/database/crud.py</code> <pre><code>def update_package(\n    db: Session, db_package: models.Package, releases_data: List[Tuple[str, datetime, bool]]\n) -&gt; models.Package:\n    \"\"\"CRUD function to update a Package (changing the `last_updated`\n    attribute).\n\n    This will simply update the `last_updated` field, delete all associated\n    releases, and recreate them from the given data.\n\n    Args:\n        db (Session): DB Session.\n        db_package (models.Package): Package to update.\n        releases_data (List[Tuple[str, datetime, bool]]): List of releases data.\n            Each element is a tuple with the version name, the release date,\n            and if this release is yanked or not.\n\n    Returns:\n        models.Package: Package updated.\n    \"\"\"\n    # Update the element itself\n    db_package.last_updated = func.now()\n    db.commit()\n\n    # Delete all of its previous releases\n    db.query(models.Release).filter(models.Release.package_id == db_package.id).delete()\n\n    # Recreate the releases from the fresh data\n    create_releases(db, releases_data, db_package.id)\n\n    db.refresh(db_package)\n    return db_package\n</code></pre>"},{"location":"code_ref_others/","title":"Others","text":""},{"location":"code_ref_others/#configurationpy","title":"<code>configuration.py</code>","text":"<p>Configuration declaration &amp; parsing.</p>"},{"location":"code_ref_others/#oblique.configuration.DefaultConfig","title":"<code>DefaultConfig</code>  <code>dataclass</code>","text":"<p>Default configuration, with sensible defaults whenever possible.</p> Source code in <code>oblique/configuration.py</code> <pre><code>@dataclass\nclass DefaultConfig:\n    \"\"\"Default configuration, with sensible defaults whenever possible.\"\"\"\n\n    # Server\n    host: str = \"0.0.0.0\"\n    port: int = 9810\n\n    # Database\n    db: str = \"${oc.env:OBLIQUE_DB,memory}\"\n    db_url: str = \"${db_url:${db}}\"\n    db_path: str = \"${oc.env:OBLIQUE_DB_PATH,db.sql}\"\n</code></pre>"},{"location":"code_ref_others/#dependenciespy","title":"<code>dependencies.py</code>","text":"<p>Dependencies used in both the web-app and the API.</p>"},{"location":"code_ref_others/#oblique.dependencies.get_db","title":"<code>get_db()</code>","text":"<p>FastAPI dependency to create a DB Session.</p> <p>Yields:</p> Name Type Description <code>SessionLocal</code> <code>SessionLocal</code> <p>DB Session.</p> Source code in <code>oblique/dependencies.py</code> <pre><code>def get_db() -&gt; SessionLocal:\n    \"\"\"FastAPI dependency to create a DB Session.\n\n    Yields:\n        SessionLocal: DB Session.\n    \"\"\"\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre>"},{"location":"code_ref_others/#serverpy","title":"<code>server.py</code>","text":"<p>File containing the main function, serving the app.</p>"},{"location":"code_ref_others/#oblique.server.get_main_app","title":"<code>get_main_app()</code>","text":"<p>Create the main FastAPI app, which is made of the web-app and the API.</p> Source code in <code>oblique/server.py</code> <pre><code>def get_main_app():\n    \"\"\"Create the main FastAPI app, which is made of the web-app and the API.\"\"\"\n    main_app = FastAPI(title=\"Oblique\", version=__version__, redoc_url=None)\n\n    main_app.add_exception_handler(*api_handler)\n    main_app.add_exception_handler(*app_handler)\n\n    main_app.include_router(app_router, tags=[\"HTML\"])\n    main_app.include_router(api_router, prefix=\"/api\", tags=[\"API\"])\n\n    return main_app\n</code></pre>"},{"location":"code_ref_others/#oblique.server.run","title":"<code>run()</code>","text":"<p>The function called to run the server.</p> <p>It will simply run the FastAPI app. Also, if the selected DB is in-memory, it will ensure the tables are created.</p> Source code in <code>oblique/server.py</code> <pre><code>def run():\n    \"\"\"The function called to run the server.\n\n    It will simply run the FastAPI app. Also, if the selected DB is in-memory,\n    it will ensure the tables are created.\n    \"\"\"\n    if config.db == \"memory\":\n        crud.create_tables()\n\n    main_app = get_main_app()\n    uvicorn.run(main_app, host=config.host, port=config.port)\n</code></pre>"},{"location":"code_ref_others/#constants","title":"Constants","text":"<p>These constants are located in <code>oblique/__init__.py</code>.</p>"},{"location":"features/","title":"Template features","text":"<p>This page introduces the different features included in this template repository, as well as where to find them and modify them if necessary.</p>"},{"location":"features/#documentation","title":"Documentation","text":"<p>This documentation is generated using Mkdocs, using Material for Mkdocs theme.</p> <p>Check out Material for Mkdocs documentation, their documentation is complete and easy to follow.</p> <p>Where to modify it ?</p> <p>If you want to modify the documentation, modify the appropriate markdown files in <code>docs/</code>.</p> <p>If you want to modify the configuration, take a look at <code>mkdocs.yml</code>.</p> <p>If you want to modify the theme (advanced), go to <code>docs/mkdocs/</code>.</p> <p>The documentation is versioned and published as a Github page with mike.</p> <p>Check mike's documentation for more details on how to use it. For a very short summary :</p> <ul> <li><code>mike deploy --push --update-aliases X.Y</code> to push the current documentation version as <code>X.Y</code> version.</li> <li><code>mike deploy --push --update-aliases X.Y name</code> to push the current documentation version as <code>X.Y</code> version, and add an alias <code>name</code>.</li> <li><code>mike retitle --push X.Y \"title\"</code> to set the title of <code>X.Y</code> as <code>title</code>. For example, <code>title</code> can be the full version <code>X.Y.Z</code>.</li> <li><code>mike set-default --push name</code> to set the alias <code>name</code> as default.</li> <li><code>mike delete --all --push</code> to remove everything (careful with that !).</li> <li><code>mike serve</code> to serve the documentation locally (for debugging).</li> </ul>"},{"location":"features/#code-formatting-linters","title":"Code formatting &amp; linters","text":"<p>To lint and check the format of the code, this template uses <code>black</code> and <code>ruff</code>.</p> <p>Where to modify it ?</p> <p>If you wish to not use one of these tools, you need to remove it from the pre-commit hooks and from the Github actions.</p>"},{"location":"features/#black","title":"<code>black</code>","text":"<p><code>black</code> is a well-known code formatter for python.</p> <p>You can run <code>black</code> manually by running :</p> <pre><code>black .\n</code></pre> <p>Where to modify it ?</p> <p>You can modify the configuration of <code>black</code> in <code>pyproject.toml</code>, under the section <code>[tool.black]</code>.</p>"},{"location":"features/#ruff","title":"<code>ruff</code>","text":"<p><code>ruff</code> is code linter and replace the need for several tools, like <code>isort</code> or <code>flake8</code>.</p> <p>You can run <code>ruff</code> manually by running :</p> <pre><code>ruff check .\n</code></pre> <p>Where to modify it ?</p> <p>You can modify the configuration of <code>ruff</code> in <code>pyproject.toml</code>. There are several sections, <code>ruff</code> uses all the sections starting with <code>[tool.ruff]</code>.</p>"},{"location":"features/#unit-testing","title":"Unit-testing","text":"<p>Unit-tests are implemented with <code>pytest</code>.</p> <p>You can run the unit-tests manually by running :</p> <pre><code>pytest\n</code></pre> <p>Where to modify it ?</p> <p>You can add/remove tests in the python files in <code>tests/</code>.</p> <p>If you wish to not run unit-tests, you need to remove it from the Github actions.</p> <p>The tests also check the test coverage, with the <code>pytest-cov</code> plugin.</p> <p>By default, the tests will fail if the test coverage is below 80%.</p> <p>Where to modify it ?</p> <p>You can change the <code>pytest</code> configuration in <code>pyproject.toml</code>. You can also change the coverage threshold in the same file.</p> <p>Info</p> <p>After running the unit-tests, you can update the coverage badge manually with <code>coverage-badge -o .github/badges/coverage.svg -f</code>.</p> <p>Note that you don't need to do it by yourself, a pre-commit hook will take care of that (see Pre-commit hooks).</p>"},{"location":"features/#pre-commit-hooks","title":"Pre-commit hooks","text":"<p>Several pre-commit hooks are used in this template repository :</p> <ul> <li>Remove trailing whitespaces</li> <li>Ensure files have an empty line at the end</li> <li>Check the syntax of <code>yaml</code> files</li> <li>Ensure no large files are added</li> <li>Format code with <code>black</code></li> <li>Lint code with <code>ruff</code></li> <li>Ensure the coverage badge is up-to-date</li> </ul> <p>Where to modify it ?</p> <p>You can modify the configuration for pre-commit hooks in the file <code>.pre-commit-config.yaml</code>.</p>"},{"location":"features/#github-actions","title":"Github actions","text":""},{"location":"features/#continuous-integration","title":"Continuous Integration","text":"<p>Continuous Integration (CI) is here to make sure that an open PR is \"safe to merge\", that is : make sure the code is well formatted, the unit-tests are passing, etc...</p> <p>Two Github actions are used for CI : one for the code format, and one for the unit-tests. These actions are ran whenever a PR is opened.</p> <p>Where to modify it ?</p> <p>You can modify the Github action for code format in <code>.github/workflows/lint.yaml</code>.</p> <p>You can modify the Github action for unit-tests in <code>.github/workflows/pytest.yaml</code>.</p>"},{"location":"features/#continuous-deployment","title":"Continuous Deployment","text":"<p>Continuous Deployment (CD) is here to automatically deploying whatever needs to be deployed. It avoids manual labor.</p> <p>Two Github actions are used for CD :</p> <ul> <li>Deploying the latest documentation (ran whenever a commit is pushed in the main branch)</li> <li>Deploying the documentation of stable versions (ran whenever a release is published)</li> </ul> <p>Where to modify it ?</p> <p>You can modify the Github action for latest documentation deployment in <code>.github/workflows/mike_dev.yaml</code>.</p> <p>You can modify the Github action for stable documentation deployment in <code>.github/workflows/mike_stable.yaml</code>.</p>"},{"location":"features/#others","title":"Others","text":"<p>There is one more Github action, which takes care of labeling and closing any stale issue or PR.</p> <p>Where to modify it ?</p> <p>You can modify the Github action for stale issue/PR and its configuration in <code>.github/workflows/stale.yaml</code>.</p>"},{"location":"features/#issues-pr-templates","title":"Issues &amp; PR Templates","text":"<p>This template repository uses a PR template. PR templates are useful to guide the format of new PR, making it easier to read and understand new PR.</p> <p>Where to modify it ?</p> <p>You can modify the PR template in the file <code>.github/pull_request_template.md</code>.</p> <p>The repository also defines several issue templates (for bugs, documentation issues, and features requests).</p> <p>These templates guide users in formatting their issue, and automatically label new issues.</p> <p>It's also useful to redirect users to the proper place to ask general questions (in the <code>Discussion</code> tab).</p> <p>Where to modify it ?</p> <p>You can modify each issue template in their appropriate file :</p> <ul> <li><code>.github/ISSUE_TEMPLATE/bug.yaml</code> for bugs</li> <li><code>.github/ISSUE_TEMPLATE/doc.yaml</code> for documentation issues</li> <li><code>.github/ISSUE_TEMPLATE/feature.yaml</code> for feature requests</li> </ul> <p>You can also modify redirections in the configuration file <code>.github/ISSUE_TEMPLATE/config.yml</code>.</p>"},{"location":"features/#dependabot","title":"Dependabot","text":"<p>Dependabot is enabled in this template repository. It keeps your dependencies up-to-date.</p> <p>Where to modify it ?</p> <p>You can enable/disable it in the <code>Settings</code> tab of your Github repository (<code>Security &amp; analysis</code> section).</p> <p>You can modify the configuration in the file <code>.github/dependabot.yml</code>.</p>"},{"location":"run/","title":"Running the app","text":"<p>This page explains how to run the demo web-application.</p>"},{"location":"run/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/astariul/oblique.git\ncd clothion\n</code></pre>"},{"location":"run/#create-the-database","title":"Create the database","text":"<p>Create a folder where you will keep your SQLite database :</p> <pre><code>mkdir ~/data\n</code></pre> <p>Then install <code>alembic</code> :</p> <pre><code>pip install alembic\n</code></pre> <p>Then create the database and initialize the tables :</p> <pre><code>OBLIQUE_DB_PATH=\"~/data/oblique.sql\" alembic upgrade head\n</code></pre>"},{"location":"run/#run-with-docker","title":"Run with Docker","text":"<p>If you have Docker installed, running the web-app is easy. First, build the Docker image :</p> <pre><code>docker build -t oblique .\n</code></pre> <p>Then run the container, linking the database we created earlier :</p> <pre><code>docker run -p 9810:9810 -v ~/data:/oblique/data -e OBLIQUE_DB_PATH=\"/oblique/data/oblique.sql\" oblique\n</code></pre>"},{"location":"run/#run-from-the-command-line","title":"Run from the command line","text":"<p>If you don\u2019t have Docker, you can also install <code>oblique</code> locally and run it from the command line :</p> <pre><code>pip install -e .\nOBLIQUE_DB_PATH=\"~/data/oblique.sql\" oblique\n</code></pre> <p>Important</p> <p>If you use the command line instead of Docker, you need to build TailwindCSS yourself. You can do this by running :</p> <pre><code>pip install pytailwindcss\ntailwindcss -o oblique/static/tailwind.css --minify\n</code></pre>"},{"location":"struct/","title":"Code structure","text":"<p>This page introduces the technologies used for this template, as well as the overall structure of the repository.</p>"},{"location":"struct/#the-demo-web-app","title":"The demo web-app","text":"<p>This repository is actually a small, working web-application, for displaying various statistics about the releases of a Python package.</p> <p>Under the hood, it's a simple call to the PyPi API to retrieve the releases data of a given package.</p> <p>In order to showcase the usage of a database, the data from the PyPi API is cached locally in our database. Only after a certain period of time, the cache is invalidated and updated with fresh data from the PyPi API.</p> <p>Aside from the web-application, we also offer a REST API so that code can consume our data as well.</p>"},{"location":"struct/#a-regular-python-package","title":"A regular python package","text":"<p>In order to have a clear separation of concerns, the code is organized as a python package :</p> <ul> <li>We have a <code>setup.py</code> file at the root of the repository, so we can install the package and the command line will run from anywhere</li> <li>All the code is located in the <code>oblique</code> folder</li> <li>Tests are in the <code>tests</code> folder</li> <li>Documentation is in the <code>docs</code> folder</li> </ul>"},{"location":"struct/#source-code","title":"Source code","text":""},{"location":"struct/#web-application-api","title":"Web-application &amp; API","text":"<p>The code for the web-application is defined in <code>oblique/app.py</code>. It is defined as a FastAPI router and contains all the routes for the web-application.</p> <p>The routes defined there are HTMX routes, and for better maintainability, we use <code>JinjaX</code>. <code>JinjaX</code> allows us to define components as Jinja templates, and make it easier to reuse these components across files. It's particularly convenient when using HTMX.</p> <p>The <code>JinjaX</code> components are defined in the <code>oblique/components/</code> folder.</p> <p>The <code>oblique/static/</code> folder contains static assets used in the web-application, such as the favicon.</p> <p>The code for the REST API is defined in <code>oblique/api.py</code>. It is also defined as a FastAPI router and contains all the routes for the API.</p> <p>The API and the web-application might share some code (for example the business logic). The code is located in <code>oblique/core.py</code>. So both the web-application and the API can import the code from this file and use it.</p> <p>Finally, the file <code>oblique/dependencies.py</code> contains FastAPI dependencies shared by the API and the web-application.</p>"},{"location":"struct/#configuration-running","title":"Configuration &amp; running","text":"<p>The configuration is in <code>oblique/configuration.py</code>.</p> <p>This is where the configuration is defined, with sensible defaults values. This is the main entry point when running the application, where we can define where to run, on which port, etc...</p> <p>For defining the configuration, we use <code>OmegaConf</code>, allowing us to define defaults values for most configuration keys while easily being able to overide these values from the command line or from environment variables.</p> <p>The file <code>server.py</code> contains the function <code>run()</code>, which is the main entry point of <code>oblique</code> : it will gather the routers of the web-application and the API, define the main FastAPI app, and run it using <code>uvicorn</code>.</p>"},{"location":"struct/#database","title":"Database","text":"<p>All the code related to the database is located in the folder <code>oblique/database/</code>. It contains the table definitions, as well as the CRUD functions to interact with the database.</p> <p>The <code>oblique/database/README.md</code> file also contains the entity-relationship diagram describing the tables of that database.</p> <p>For the database we use <code>SQLite</code> because it's fast and easy to get started with, and will fill most of the needs until the application really scale. Once it scales, it shouldn't be too hard to switch to another database since we are using <code>sqlalchemy</code>.</p> <p>For the database migrations, <code>alembic</code> is used, and the migrations scripts are located in the folder <code>alembic/</code>.</p> <p>The <code>alembic/README.md</code> file also contains more information on how to use <code>alembic</code> to create new migrations or to migrate the current database.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#create-your-repository","title":"Create your repository","text":"<p>The very first step is to create your own repository from this template repository. To do this, just click the button \"Use this template\" :</p> <p> </p> <p>It will prompt you to create a new Github repository.</p>"},{"location":"usage/#add-your-content","title":"Add your content","text":"<p>Once your repository is created, you can just clone it and replace the dummy content with your content.</p> <p>To be sure you don't forget to replace anything, here is an exhaustive list of steps to follow :</p>"},{"location":"usage/#change-setuppy","title":"Change <code>setup.py</code>","text":"<p>In <code>setup.py</code>, replace the <code>name</code> of the package, the <code>version</code>, the <code>author</code> and the <code>author_email</code>, the package <code>description</code>, and the package <code>url</code>.</p>"},{"location":"usage/#replace-readmemd","title":"Replace <code>README.md</code>","text":"<p>You can keep the same README outline, but you must update the core content.</p> <p>Make sure to search for any occurence of the string <code>astariul/oblique</code> and replace it with your own <code>&lt;user&gt;/&lt;repo&gt;</code>.</p> <p>Make sure to search for any occurence of the string <code>astariul</code> and replace it with your own username.</p> <p>Make sure to search for any occurence of the string <code>oblique</code> and replace it with the name of your package.</p> <p>Important</p> <p>Don't forget to carefully read your README and edit each section with a content that fit your package !</p>"},{"location":"usage/#update-the-documentation","title":"Update the documentation","text":"<p>In the file <code>mkdocs.yml</code>, replace the <code>site_name</code>, <code>repo_url</code>, <code>repo_name</code>.</p> <p>Of course you also need to update the content of the documentation. You can do this by updating the <code>md</code> files in the <code>docs/</code> folder.</p> <p>For the code reference (in <code>docs/code_ref.md</code>), make sure to change the name from <code>oblique</code> to the name of your package.</p> <p>Info</p> <p>The documentation will be published in Github page after you create a Github release.</p>"},{"location":"usage/#change-the-package-name-and-content","title":"Change the package name and content","text":"<p>Make sure to replace the name of the folder <code>oblique/</code>, which contains the source code of the package, to the name of your package.</p> <p>Of course change the routes, components, and core logic to put your actual application !</p>"},{"location":"usage/#update-the-configuration-file","title":"Update the configuration file","text":"<p>In the configuration file <code>pyproject.toml</code>, you should replace the name <code>oblique</code> with the name of your package.</p>"},{"location":"usage/#replace-the-tests","title":"Replace the tests","text":"<p>If you removed the existing template code, the tests will not pass anymore ! Make sure to write new tests to validate your application logic.</p>"},{"location":"usage/#update-names-and-links-in-github-folder","title":"Update names and links in <code>.github/</code> folder","text":"<p>A few links to update in <code>.github/</code> folder :</p> <ul> <li>In <code>.github/ISSUE_TEMPLATE/bug.yaml</code>, replace <code>oblique</code> by the name of your package.</li> <li>In <code>.github/ISSUE_TEMPLATE/config.yml</code>, replace <code>astariul/oblique</code> by your <code>&lt;user&gt;/&lt;repo&gt;</code>.</li> <li>In <code>.github/workflows/mike_dev.yaml</code>, replace <code>oblique</code> by your package name.</li> <li>In <code>.github/workflows/mike_stable.yaml</code>, replace <code>oblique</code> by your package name.</li> </ul>"},{"location":"usage/#optionally","title":"Optionally","text":"<p>Optionally, if there is some features you don't want (like the Github action that automatically publish the documentation), you can remove it !</p> <p>Head over to the Features page to see which file to remove.</p>"},{"location":"usage/#enable-dependabot","title":"Enable Dependabot","text":"<p>From the Github website, on your repository page, you can enable Dependabot by going to the <code>Settings</code> tab of your repository, then in the <code>Security &amp; analysis</code> section you can enable <code>Dependabot alerts</code> and <code>Dependabot security updates</code>.</p>"}]}